#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define LBASE 0
#define LGAMING 1
#define LNAV 2
#define LNUM 3
#define LSYM 4
#define LFN 5
#define LMAGIC 6
#define HRM_A hrm LGUI A
#define HRM_O hrm LALT O
#define HRM_E hrm LCTRL E
#define HRM_U hrm_i LSHFT U
#define HRM_S hrm RGUI S
#define HRM_N hrm RALT N
#define HRM_T hrm RCTRL T
#define HRM_H hrm_i RSHFT H

/ {
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        bt_4: bt_4 {
            label = "BT_4";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 4>;
        };
    };
};

/ {
    behaviors {
        hrm_i_l: hrm_i_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_I_L";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75 7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75>;
            require-prior-idle-ms = <100>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        ltp: ltp {
            compatible = "zmk,behavior-hold-tap";
            label = "LTP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;

            hold-while-undecided;
        };

        tdcaps: tdcaps {
            compatible = "zmk,behavior-tap-dance";
            label = "TDCAPS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&caps_word>, <&kp CAPS>;
        };

        hrm_i_r: hrm_i_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_I_R";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67>;
            require-prior-idle-ms = <100>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
&kp GRAVE          &kp N1       &kp N2           &kp N3        &kp N4            &kp N5  &kp LBKT                                                                  &kp RBKT        &kp N6  &kp N7            &kp N8        &kp N9       &kp N0       &kp MINUS
&kp DOUBLE_QUOTES  &kp SQT      &kp COMMA        &kp DOT       &kp P             &kp Y   &kp LPAR                                                                  &kp RPAR        &kp F   &kp G             &kp C         &kp R        &kp L        &kp EQUAL
&kp SEMI           &hrm LGUI A  &hrm LEFT_ALT O  &hrm LCTRL E  &hrm_i_l LSHFT U  &kp I   &kp LBRC         &kp ESC       &sk LSHFT      &kp RSHFT  &kp DEL          &kp RBRC        &kp D   &hrm_i_r RSHFT H  &hrm RCTRL T  &hrm RALT N  &hrm RGUI S  &key_repeat
&kp CAPSLOCK       &kp FSLH     &kp Q            &kp J         &kp K             &kp X                                  &kp LCTRL      &kp RCTRL                                   &kp B   &kp M             &kp W         &kp V        &kp Z        &caps_word
&mo LMAGIC         &none        &none            &none         &none                     &ltp LNAV SPACE  &ltp LFN TAB  &kp LALT       &kp RALT   &ltp LSYM ENTER  &ltp LNUM BSPC          &none             &none         &none        &none        &to LGAMING
            >;
        };

        layer_Gaming {
            bindings = <
&kp N5      &kp ESC    &kp N1  &kp N2  &kp N3  &kp N4  &kp F5                                          &none  &none  &none  &none  &none  &none  &none
&kp N6      &kp TAB    &kp Q   &kp W   &kp E   &kp R   &kp T                                           &none  &none  &none  &none  &none  &none  &none
&kp N7      &kp LSHFT  &kp A   &kp S   &kp D   &kp F   &kp G      &kp N5     &kp N6      &none  &none  &none  &none  &none  &none  &none  &none  &none
&kp N8      &kp LCTRL  &kp Z   &kp X   &kp C   &kp V                         &kp N7      &none                &none  &none  &none  &none  &none  &none
&mo LMAGIC  &kp LALT   &none   &none   &none           &kp SPACE  &kp LCTRL  &kp N8      &none  &none  &none         &none  &none  &none  &none  &to LBASE
            >;
        };

        layer_Nav {
            bindings = <
&none       &none     &none     &none      &none      &none  &none                                    &none     &none  &none     &none      &none      &none      &none
&none       &none     &none     &none      &none      &none  &none                                    &none     &none  &none     &none      &none      &none      &none
&none       &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none  &none  &none  &none      &none  &kp DEL  &none     &none  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none
&none       &none     &none     &none      &none      &none                &none      &none                     &none  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none
&mo LMAGIC  &none     &none     &none      &none             &none  &none  &none      &none  &kp RET  &kp BSPC         &none     &none      &none      &none      &none
            >;
        };

        layer_Num {
            bindings = <
&none       &none      &none   &none   &none   &none      &none                                             &none  &none  &none      &none      &none     &none     &none
&none       &kp COMMA  &kp N7  &kp N8  &kp N9  &kp N0     &none                                             &none  &none  &none      &none      &none     &none     &none
&none       &kp SEMI   &kp N4  &kp N5  &kp N6  &kp EQUAL  &none      &kp MINUS  &kp PLUS      &none  &none  &none  &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &none
&none       &kp GRAVE  &kp N1  &kp N2  &kp N3  &kp BSLH                         &kp FSLH      &none                &none  &none      &none      &none     &none     &none
&mo LMAGIC  &none      &none   &none   &none              &kp SPACE  &kp DOT    &kp STAR      &none  &none  &none         &none      &none      &none     &none     &none
            >;
        };

        layer_Sym {
            bindings = <
&none       &none      &none     &none      &none      &none     &none                                             &none  &none  &none      &none      &none     &none     &none
&none       &kp LPAR   &kp AMPS  &kp STAR   &kp LPAR   &kp RPAR  &none                                             &none  &none  &none      &none      &none     &none     &none
&none       &kp COLON  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS  &none      &kp UNDER  &kp RBRC      &none  &none  &none  &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &none
&none       &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE                        &kp LBRC      &none                &none  &none      &none      &none     &none     &none
&mo LMAGIC  &none      &none     &none      &none                &kp SPACE  &kp LBKT   &kp RBKT      &none  &none  &none         &none      &none      &none     &none     &none
            >;
        };

        layer_Fn {
            bindings = <
&none       &none  &kp F10  &kp F11  &kp F12  &none  &none                                  &none  &none  &none      &none      &none     &none     &none
&none       &none  &kp F7   &kp F8   &kp F9   &none  &none                                  &none  &none  &none      &none      &none     &none     &none
&none       &none  &kp F4   &kp F5   &kp F6   &none  &none  &none  &none      &none  &none  &none  &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &none
&none       &none  &kp F1   &kp F2   &kp F3   &none                &none      &none                &none  &none      &none      &none     &none     &none
&mo LMAGIC  &none  &none    &none    &none           &none  &none  &none      &none  &none  &none         &none      &none      &none     &none     &none
            >;
        };

        layer_Magic {
            bindings = <
&none        &none  &none  &none  &none                   &none  &none                                                   &none            &none  &none  &none  &none  &none  &none
&none        &none  &none  &none  &none                   &none  &none                                                   &none            &none  &none  &none  &none  &none  &none
&bootloader  &none  &none  &none  &none                   &none  &none  &bt_2  &bt_3             &bt BT_CLR  &none       &none            &none  &none  &none  &none  &none  &bootloader
&none        &none  &none  &none  &none                   &none                &bt_4             &bl BL_INC                               &none  &none  &none  &none  &none  &none
&none        &none  &none  &none  &rgb_ug RGB_MEFS_CMD 5         &bt_0  &bt_1  &out OUT_USB      &bl BL_DEC  &bl BL_TOG  &rgb_ug RGB_TOG         &none  &none  &none  &none  &none
            >;
        };
    };
};
